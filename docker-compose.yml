version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: movie-db
    environment:
      POSTGRES_DB: movie_db
      POSTGRES_USER: admindb
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - movie-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admindb -d movie_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Search Service
  search-service:
    build:
      context: ./microservices/search-service
      dockerfile: Dockerfile
    container_name: search-service
    environment:
      DATABASE_URL: postgresql://admindb:admin123@postgres:5432/movie_db
      DATABASE_HOST: postgres
      DATABASE_USER: admindb
      DATABASE_NAME: movie_db
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: admin123
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/search"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streaming Service
  streaming-service:
    build:
      context: ./microservices/streaming-service
      dockerfile: Dockerfile
    container_name: streaming-service
    environment:
      DISTRIBUTION_DOMAIN: d1henbbhjbyad4.cloudfront.net
      PRIVATE_KEY_PATH: /app/pk-APKAREOSHZ2RHFQO4IH5.pem
      KEY_PAIR_ID: APKAREOSHZ2RHFQO4IH5
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: us-east-1
    ports:
      - "8002:8002"
    volumes:
      - ./microservices/streaming-service/pk-APKAREOSHZ2RHFQO4IH5.pem:/app/pk-APKAREOSHZ2RHFQO4IH5.pem:ro
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/stream/test"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ContentVideo Service
  contentvideo-service:
    build:
      context: ./microservices/contentvideo-service
      dockerfile: Dockerfile
    container_name: contentvideo-service
    environment:
      DATABASE_HOST: postgres
      DATABASE_USER: admindb
      DATABASE_NAME: movie_db
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: admin123
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: us-east-1
      AWS_S3_ORIGIN_BUCKET: movie-streaming-origin
      AWS_S3_DEST_BUCKET: movie-streaming-dest
      AWS_MEDIACONVERT_ROLE_ARN: ${AWS_MEDIACONVERT_ROLE_ARN}
      AWS_MEDIACONVERT_TEMPLATE_1080: MovieHLS_1080
      AWS_MEDIACONVERT_TEMPLATE_720: MovieHLS_720
      AWS_MEDIACONVERT_TEMPLATE_480: MovieHLS_480
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./microservices/contentvideo-service/us-east-1-bundle.pem:/app/us-east-1-bundle.pem:ro
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/api/content/upload"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong Gateway
  kong-database:
    image: postgres:15-alpine
    container_name: kong-db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - movie-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong -d kong"]
      interval: 30s
      timeout: 10s
      retries: 3

  kong-migration:
    image: kong:3.4-alpine
    container_name: kong-migration
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - movie-network

  kong:
    image: kong:3.4-alpine
    container_name: kong-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8080:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    depends_on:
      kong-migration:
        condition: service_completed_successfully
      search-service:
        condition: service_healthy
      streaming-service:
        condition: service_healthy
      contentvideo-service:
        condition: service_healthy
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong Configuration
  kong-config:
    image: curlimages/curl:latest
    container_name: kong-config
    depends_on:
      kong:
        condition: service_healthy
    networks:
      - movie-network
    command: >
      sh -c "
        sleep 10 &&
        
        # Create Search Service
        curl -i -X POST http://kong:8001/services/ \
          --data 'name=search-service' \
          --data 'url=http://search-service:8001' &&
        
        curl -i -X POST http://kong:8001/services/search-service/routes \
          --data 'paths[]=/api/search' \
          --data 'strip_path=false' &&
        
        # Create Streaming Service  
        curl -i -X POST http://kong:8001/services/ \
          --data 'name=streaming-service' \
          --data 'url=http://streaming-service:8002' &&
        
        curl -i -X POST http://kong:8001/services/streaming-service/routes \
          --data 'paths[]=/api/stream' \
          --data 'strip_path=false' &&
        
        # Create ContentVideo Service
        curl -i -X POST http://kong:8001/services/ \
          --data 'name=contentvideo-service' \
          --data 'url=http://contentvideo-service:8003' &&
        
        curl -i -X POST http://kong:8001/services/contentvideo-service/routes \
          --data 'paths[]=/api/content' \
          --data 'strip_path=false' &&
        
        # Enable CORS for all services
        curl -i -X POST http://kong:8001/plugins/ \
          --data 'name=cors' \
          --data 'config.origins=http://localhost:3000,http://localhost:8080' \
          --data 'config.methods=GET,POST,PUT,DELETE,OPTIONS' \
          --data 'config.headers=Accept,Accept-Version,Content-Length,Content-MD5,Content-Type,Date,X-Auth-Token,Authorization' \
          --data 'config.exposed_headers=X-Auth-Token' \
          --data 'config.credentials=true' \
          --data 'config.max_age=3600'
      "

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: movie-frontend
    ports:
      - "3000:80"
    depends_on:
      kong-config:
        condition: service_completed_successfully
    networks:
      - movie-network
    environment:
      - NODE_ENV=production

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: movie-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - movie-network
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  kong_data:
  redis_data:

networks:
  movie-network:
    driver: bridge
